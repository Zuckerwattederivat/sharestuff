/**
 * SCSS Setup
 * ----------------
 * - Colors
 * - Shadows
 * - Fonts & Text
 * - Breakpoints
 * - Z-Index
 * - Images
 * - Buttons & Alerts
 */

/**
 * ------------------------------------------------------------------------------------
 * Color Settings
 * ------------------------------------------------------------------------------------
*/

// variables
$transparent: transparent;
$blackColor: #000000;
$blackTransColor: rgba(0, 0, 0, 0.5);
$whiteColor: #ffffff;

// main theme
$primaryColor: (100: #0df97c, 200: #0bd068, 300: #089349);
$successColor: (100: #6ca779, 200: #51a764, 300: #28a745);
$infoColor: (100: #6eb6af, 200: #4eb6ac, 300: #13b6a7);
$warningColor: (100: #ffd865, 200: #f9d640, 300: #ffcb31, 400: #ffc008);
$dangerColor: (100: #dc5c68, 200: #dc3545, 300: #dc2133);

// additional colors
$grayColor: (
	100: #dadada,
	200: #d1d1d1,
	300: #c6c6c6,
	400: #bfbfbf,
	500: #8f8f8f,
	600: #7b7b7b,
	700: #656565,
	800: #303030,
	900: #202020,
	1000: #181818
);
$tealColor: (
	100: #e6fffa,
	200: #b2f5ea,
	300: #81e6d9,
	400: #4fd1c5,
	500: #38b2ac,
	600: #319795,
	700: #2c7a7b,
	800: #285e61,
	900: #234e52
);
$indigoColor: (
	100: #ebf4ff,
	200: #c3dafe,
	300: #a3bffa,
	400: #7f9cf5,
	500: #667eea,
	600: #5a67d8,
	700: #4c51bf,
	800: #434190,
	900: #3c366b
);
$purpleColor: (
	100: #faf5ff,
	200: #e9d8fd,
	300: #d6bcfa,
	400: #b794f4,
	500: #9f7aea,
	600: #805ad5,
	700: #6b46c1,
	800: #553c9a,
	900: #44337a
);
$pinkColor: (
	100: #fff5f7,
	200: #fed7e2,
	300: #fbb6ce,
	400: #f687b3,
	500: #ed64a6,
	600: #d53f8c,
	700: #b83280,
	800: #97266d,
	900: #702459
);

/**
 * ------------------------------------------------------------------------------------
 * Shadows
 * ------------------------------------------------------------------------------------
*/

$shadows: (
	around: 0px 0px 8px -3px rgba(50, 50, 50, 0.75),
	top: 0px -5px 8px -3px rgba(50, 50, 50, 0.75),
	right: 8px 0px 7px -2px rgba(50, 50, 50, 0.75),
	bottom: 0px 5px 8px -3px rgba(50, 50, 50, 0.75),
	left: -8px 0px 7px -2px rgba(50, 50, 50, 0.75)
);

// shadow around
@mixin shadow($shadow) {
	// If the shadow exists in the map.
	@if map-has-key($shadows, $shadow) {
		// get the shadow value
		$shadow-value: map-get($map: $shadows, $key: $shadow);

		// write shadow
		box-shadow: $shadow-value;

		// If the shadow doesn't exist in the map.
	} @else {
		// Log a warning.
		@warn 'Invalid shadow: #{$shadow}.';
	}
}

/**
 * ------------------------------------------------------------------------------------
 * Fonts
 * ------------------------------------------------------------------------------------
*/

// include
@import url('https://fonts.googleapis.com/css?family=Roboto');
@import url('https://fonts.googleapis.com/css?family=Montserrat');

// mixin 1
@mixin font0 {
	font-family: 'Roboto', sans-serif;
}

// mixin 2
@mixin font1 {
	font-family: 'Montserrat', sans-serif;
}

// line height
$fontSizes: (
	xs: 0.95rem,
	s: 1rem,
	md: 1.05rem,
	lg: 1.1rem,
	xl: 1.25rem,
	xxl: 1.5rem,
	xxxl: 1.75rem,
	xxxxl: 1.9rem,
	big: 2.2rem
);

@mixin fontSize($fontsize) {
	// If the fontsize exists in the map.
	@if map-has-key($fontSizes, $fontsize) {
		// Get the fontsize value.
		$fontsize-value: map-get($fontSizes, $fontsize);
		// write font-size value
		font-size: $fontsize-value;
	}
}

@mixin lineHeight($lineHeight) {
	// If the fontsize exists in the map.
	@if map-has-key($fontSizes, $lineHeight) {
		// Get the fontsize value.
		$lineHeight-value: map-get($fontSizes, $lineHeight);
		// write font-size value
		line-height: $lineHeight-value;
	}
}

/**
 * ------------------------------------------------------------------------------------
 * Breakpoints
 * ------------------------------------------------------------------------------------
*/

// variables
$breakpoints: (xs: 576px, sm: 768px, md: 992px, lg: 1200px);

// respond above defined width
@mixin respondAbove($breakpoint) {
	// If the breakpoint exists in the map.
	@if map-has-key($breakpoints, $breakpoint) {
		// Get the breakpoint value.
		$breakpoint-value: map-get($breakpoints, $breakpoint);

		// Write the media query.
		@media (min-width: $breakpoint-value) {
			@content;
		}

		// If the breakpoint doesn't exist in the map.
	} @else {
		// Log a warning.
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}

// respond below defined width
@mixin respondBelow($breakpoint) {
	// If the breakpoint exists in the map.
	@if map-has-key($breakpoints, $breakpoint) {
		// Get the breakpoint value.
		$breakpoint-value: map-get($breakpoints, $breakpoint);

		// Write the media query.
		@media (max-width: ($breakpoint-value - 1)) {
			@content;
		}

		// If the breakpoint doesn't exist in the map.
	} @else {
		// Log a warning.
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}

// respond between defined width
@mixin respondBetween($lower, $upper) {
	// If both the lower and upper breakpoints exist in the map.
	@if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
		// Get the lower and upper breakpoints.
		$lower-breakpoint: map-get($breakpoints, $lower);
		$upper-breakpoint: map-get($breakpoints, $upper);

		// Write the media query.
		@media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
			@content;
		}

		// If one or both of the breakpoints don't exist.
	} @else {
		// If lower breakpoint is invalid.
		@if (map-has-key($breakpoints, $lower) == false) {
			// Log a warning.
			@warn 'Your lower breakpoint was invalid: #{$lower}.';
		}

		// If upper breakpoint is invalid.
		@if (map-has-key($breakpoints, $upper) == false) {
			// Log a warning.
			@warn 'Your upper breakpoint was invalid: #{$upper}.';
		}
	}
}

/**
 * ------------------------------------------------------------------------------------
 * Z-Index
 * ------------------------------------------------------------------------------------
*/

// variables
$z-index: (10: 10, 20: 20, 30: 30, 40: 40, 50: 50, 60: 60, 70: 70, 80: 80, 90: 90, 100: 100);

/**
 * ------------------------------------------------------------------------------------
 * Images
 * ------------------------------------------------------------------------------------
*/

// background image center
@mixin backgroundImageCenter($src) {
	background-image: url($src);
	background-size: cover;
	background-position: center;
	background-repeat: no-repeat;
}

/**
 * ------------------------------------------------------------------------------------
 * Buttons & Alerts
 * ------------------------------------------------------------------------------------
*/

// variables
$btnBackgrounds: (
	transparent: $transparent,
	white: $whiteColor,
	primary: map-get($map: $primaryColor, $key: 300),
	success: map-get($map: $successColor, $key: 200),
	info: map-get($map: $infoColor, $key: 200),
	warning: map-get($map: $warningColor, $key: 200),
	danger: map-get($map: $dangerColor, $key: 200)
);

// buttons & alerts
@mixin buttonAlertDesign($btnBackground, $borderRadius: 99px, $shadow: "") {
	border-radius: 999px;
	min-width: 84px;
	min-height: 41px;
	display: flex;
	justify-content: center;
	align-items: center;
	padding: 0 1em;
	border: none;

	// border-radius:
	@if $borderRadius != 99px {
		border-radius: $borderRadius;
	}

	// add shadow
	@if $shadow == true {
		@include shadow(around);
	}

	// designs
	@if map-get($map: $btnBackgrounds, $key: $btnBackground) == $transparent {
		color: map-get($map: $grayColor, $key: 800);
		border: 1px solid map-get($map: $grayColor, $key: 800);
		background-color: $transparent;

		// white
	} @else if map-get($map: $btnBackgrounds, $key: $btnBackground) == $whiteColor {
		color: map-get($map: $grayColor, $key: 800);
		background-color: $whiteColor;

		// primary
	} @else if map-get($map: $btnBackgrounds, $key: $btnBackground) == map-get($map: $primaryColor, $key:  300) {
		color: $whiteColor;
		background-color: map-get($map: $primaryColor, $key: 300);

		// success
	} @else if map-get($map: $btnBackgrounds, $key: $btnBackground) == map-get($map: $successColor, $key:  200) {
		color: $whiteColor;
		background-color: map-get($map: $successColor, $key: 200);

		// info
	} @else if map-get($map: $btnBackgrounds, $key: $btnBackground) == map-get($map: $infoColor, $key:  200) {
		color: $whiteColor;
		background-color: map-get($map: $infoColor, $key: 200);

		// warning
	} @else if map-get($map: $btnBackgrounds, $key: $btnBackground) == map-get($map: $warningColor, $key:  200) {
		color: map-get($map: $grayColor, $key: 800);
		background-color: map-get($map: $warningColor, $key: 300);

		// danger
	} @else if map-get($map: $btnBackgrounds, $key: $btnBackground) == map-get($map: $dangerColor, $key:  200) {
		color: $whiteColor;
		background-color: map-get($map: $dangerColor, $key: 200);
	}
}

// button hover
@mixin buttonHover($btnBackground, $shadow: "") {
	// add shadow
	@if $shadow == true {
		@include shadow(around);
	}

	// designs
	@if map-get($map: $btnBackgrounds, $key: $btnBackground) == $transparent {
		color: map-get($map: $grayColor, $key: 600);
		border: 1px solid map-get($map: $grayColor, $key: 600);

		// white
	} @else if map-get($map: $btnBackgrounds, $key: $btnBackground) == $whiteColor {
		color: lighten($color: map-get($map: $grayColor, $key: 800), $amount: 5%);
		background-color: darken($color: $whiteColor, $amount: 5%);

		// primary
	} @else if map-get($map: $btnBackgrounds, $key: $btnBackground) == map-get($map: $primaryColor, $key:  300) {
		background-color: lighten($color: map-get($map: $primaryColor, $key: 300), $amount: 5%);

		// success
	} @else if map-get($map: $btnBackgrounds, $key: $btnBackground) == map-get($map: $successColor, $key:  200) {
		background-color: lighten($color: map-get($map: $successColor, $key: 200), $amount: 5%);

		// info
	} @else if map-get($map: $btnBackgrounds, $key: $btnBackground) == map-get($map: $infoColor, $key:  200) {
		background-color: lighten($color: map-get($map: $infoColor, $key: 200), $amount: 5%);

		// warning
	} @else if map-get($map: $btnBackgrounds, $key: $btnBackground) == map-get($map: $warningColor, $key:  200) {
		color: lighten($color: map-get($map: $grayColor, $key: 800), $amount: 10%);
		background-color: lighten($color: map-get($map: $warningColor, $key: 200), $amount: 5%);

		// danger
	} @else if map-get($map: $btnBackgrounds, $key: $btnBackground) == map-get($map: $dangerColor, $key:  200) {
		background-color: lighten($color: map-get($map: $dangerColor, $key: 200), $amount: 5%);
	}
}
